Name: Daryl AlexStudent ID: 143691202Email: dalex4@myseneca.caProfessor: Jeevan PantUpon successful completion of this workshop, I was able to create a program component of quadratic complexity and, I was also able to use a smart pointer to move an object. One of the benefits of smart pointers is that they ensure that the actual object gets removed. When working with a raw pointer, you'll need a delete for each possible exit point, and an exception will still cause a memory leak. If an exception occurs, smart pointers will also clear the memory. Example for smart pointers from the code is below:       std::unique_ptr<EmployeeWage> wage(new EmployeeWage(emp[i].name, sal[j].salary));and that of raw pointer is below:EmployeeWage* wage = new EmployeeWage(emp[i].name, sal[j].salary);The main difference between a smart pointers and raw pointers is that a smart pointers is a class that wraps a pointer and it also deallocates the memory that the pointer points to whereas a raw pointer can assign the address of a non-pointer variable.