Name: Daryl AlexStudent ID: 143691202Email: dalex4@myseneca.caProfessor: Jeevan PantFunctors, lambda expressions, and error handling were all covered in this workshop. While the functor and lambda expressions are similar, the lambda function is nothing more than a nameless functor. The most common application of a lambda is when a function is only reused for a section or two; however, if it is a section that is frequently utilised, a functor is preferable. Furthermore, a lambda cannot template, thus a functor must be used instead.Template for a class std::function is a polymorphic function wrapper that can be used for any purpose. Any Copy Constructor can be stored, copied, and invoked by instances of std::function. Functions, lambda expressions, bind expressions, and other function objects, as well as pointers to member functions and data members, are all callable targets.The std::function object is used to erase the type of a generic callable object with a specific prototype. When you want your function or class to receive a generic callable object with a specific signature, you use it. This is the main advantage. The disadvantage is that, they take up more space, may require heap allocation during construction, and may increase the time it takes to build and link because you're compiling a new template for everything. 